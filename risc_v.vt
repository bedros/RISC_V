// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/18/2019 22:57:02"
                                                                                
// Verilog Test Bench template for design : risc_v
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module risc_v_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg reset;
// wires                                               
wire [31:0]  code_addr_bus;
wire [31:0]  code_data_bus;
reg code_data_already;
//wire [31:0]  data_bus_rom;
// assign statements (if any)                          
risc_v i1 (
// port map - connection between master ports and signals/registers   
.code_addr_bus(code_addr_bus),
.code_data_bus(code_data_bus),
.code_data_already(code_data_already),
.mem_addr_bus(mem_addr_bus),
.mem_data_out_bus(mem_data_out_bus),
.mem_data_in_bus(mem_data_in_bus),
.reset(reset),
.clk(clk)
);



rom_32bit _rom(
	.address(code_addr_bus[9:2]),
	.clock(clk),
	//.q({code_data_bus[7:0],code_data_bus[15:8],code_data_bus[23:16],code_data_bus[31:24]}));
	.q(code_data_bus));
initial                                                
begin                                                  
clk = 1'b1;
reset = 1'b1;
#100
reset = 1'b0;
#5
reset = 1'b1;
#10000;
$stop();
end                                                    
always  #10 clk = ~clk;

always @(posedge clk,negedge reset)  begin
if(!reset)begin
	code_data_already <= 1'b0;
end 
else begin
 code_data_already <= 1'b1;
end         
end					  
endmodule

